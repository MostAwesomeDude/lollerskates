from lxml.html import fromstring
import requests

url = "http://leagueoflegends.wikia.com/wiki/Base_champion_statistics"
request = requests.get(url)
html = request.content
document = fromstring(html)

table = document.xpath("//table")[1]
# In the future, if you ever need the magic incantation to get the table
# headers, try this: [i[0].text if i else i.text for i in table[0]]
headers = [
    "health", "healthg",
    "hregen", "hregeng",
    "mana", "manag",
    "mregen", "mregeng",
    "ad", "adg",
    "as", "asg",
    "armor", "armorg",
    "mr", "mrg",
    "ms",
    "range",
]

champions = []

for row in table[1:]:
    d = {}
    # Champ name rule: Remove spaces and punctuation, and capitalize by hand.
    champ = row[0][0][1][0].text.strip()
    champ = champ.replace(" ", "").replace(".", "").replace("'", "")
    champ = champ[0].upper() + champ[1:]
    d["champ"] = champ
    for label, cell in zip(headers, row[1:]):
        data = cell.text.strip()
        # AS per level is measured in percents.
        if data.endswith("%"):
            data = float(data[:-1]) / 100.0
        else:
            data = float(data)
        d[label] = data
    champions.append(d)

champions.sort(key=lambda d: d["champ"])

print """module Lol.Stats.Champs where

-- This module is autogenerated by champs.py in the top-level directory.
-- To regenerate, be online, then $ python champs.py > Lol/Stats/Champs.hs
-- If you hand-edit this, be sure to explain your reasoning.
-- All of the champion quirks are tracked in champs.py, not in this file.
-- ~ C.

import Prelude

import qualified Data.Map as M

import Lol.Champs
import Lol.Stats

champBaseStats :: M.Map Champ CoreStats
"""

# Haskell's syntax rules bite hard here; the first element's gotta be
# special-cased, as well as the last element. What an oddly-parsed language.

baseformat = """(%(champ)s,
                               CoreStats %(health)s %(mana)s %(ad)s %(as)s %(range)s %(hregen)s %(mregen)s %(armor)s %(mr)s %(ms)s)"""
print ("champBaseStats = M.fromList [ %s" % baseformat) % champions[0]
for row in champions[1:-1]:
    print ("                            , %s" % baseformat) % row

print ("                            , %s ]\n" % baseformat) % champions[-1]
print "\n"

print "champLevelStats :: M.Map Champ CoreStats"

gformat = """(%(champ)s,
                               CoreStats %(healthg)s %(manag)s %(adg)s %(asg)s 0.0 %(hregeng)s %(mregeng)s %(armorg)s %(mrg)s 0.0)"""
print ("champLevelStats = M.fromList [ %s" % gformat) % champions[0]
for row in champions[1:-1]:
    print ("                            , %s" % gformat) % row
print ("                            , %s ]\n" % gformat) % row
